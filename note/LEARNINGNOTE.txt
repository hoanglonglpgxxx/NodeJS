\*\*callback

- syc callback: callback thực hiện ngay lập tức là sync callback
- async callback: callback dùng để tiếp tục thực thi code sau khi 1 tác vụ bất đồng bộ hoàn thành

- async: chạy các task ở background,l khi xong thì callback của nó được gọi thay vì phải đợi các task khác hoàn thành rồi mới thực hiện như sync

\*\*Streams:

- Trong node, xử lý luồng data theo từng phần khi data đến thay vì đợi toàn bộ luồng data khả dụng

* ex: xem video utube, xem từng phần trong khi data còn lại đổ về qua thời gian

\*\*Buffers: quyết định được thời điểm gửi data để xử lý

- buffer nodejs chỉ có 7 slot?, 64KB

-PARSE VARIABLE FROM URL

//ABOUT BACKEND

- Domain name is not real address, DNS will convert domain name to real IP address

---

xem lại vid 3 folder 4 về threads
xem lại folder 4-5 để nắm base-
!!! tìm hiểu event loop
https://anonystick.com/blog-developer/he-thong-eventloop-trong-nodejs-cach-hoat-dong-va-cach-su-dung-voi-loi-giai-thich-can-ke-2022122761300007

---

\*\*eventLoop

- most important feature, khiến async function khả thi
- gồm 4 phase:

* expired timer callbacks
* I/O polling and callbacks
* setImmediate callbacks
* close callbacks

robust: mạnh
orchestration: cấu hình tự động
accountability: nhiệm vụ/trách nhiệm

\*\*EXPRESS

- sử dụng mvc architecture

* REST API

- chia api thành logical resources

  1. resources ở đây là object, tất cả info có thể đặt tên là resource
  2. endpoints should contain only resources(nouns) & use HTTP methods for actions
  3. PUT/PATCH: update, PUT thay đổi toàn bộ resouce, PATCH chỉ thay đổi field được yêu cầu,
     > Nếu không có sẵn resource mà dùng PUT -> như POST -> tạo 1 resource mới
     > Nếu không có sẵn resource mà dùng PATCH -> FAIL, không tạo resource mới

- expose structured, resource-based URLs
- use http methods
- thường send data as json (key of json must be String)
- be stateless: all state handled on the client(not on server) aka request must contain all the information necessary to process a certain request.The server should not have to remember previous requests

- !!!! Middleware thực thi theo thứ tự khai báo
  //? cơ chế process, process.env trên toàn bộ tiến trình

* application: code that is only concerned abt the application's implementation, not the underlying business problem that r trying to solve(ex: showing and selling tours), cocerned abt managing requests and responses, only abt the app's more technical aspects(KEEP IN CONTROLLER)
* business lgoic: related to business rules, how the business works & business needs(ex: creating new tours in the DB) (KEEP IN MODEL)

- Protocol and host list are required in "mongodb+srv: lỗi này do bản của mongoose
- đọc các query method của mongoose

- Virtual props: khai báo ở schema, có return nhưng không lưu trong DB, getter function của virtual props phải là func thường, not arrow func DO CẦN THIS
- do không trong DB nên không query được
  -> tên_schema.virutal('tên_field')

-hook in nodejs???

MOST POWERFUL PASSWORD IS THE LONGEST ONE

\*\*\* bắt event khi save và field nào đó bị modified
userSchema.pre('save', function (next) {
if(this.isModified('ten_field')){//code}
});

//JSON WEB TOKEN (jwt) authentication: READ ABT THIS

- Khi query, select field không được show ở response (bị set select: false trong schema) , cần thêm + vào trước tên field
  ex: User.findOne({email: email}).select('+password');
- global quick search vs code: %ssearch_val

- admin default pass: Abc.2010@
- all pass: test1234

I. types of rela between data
a. 1:1 : 1 field have only 1 value BEST TO USE: 1:FEW CHILD -> REFERENCING/EMBEDDING
b. 1: many : 1:few, 1:many, 1:ton BEST TO USE: 1:MANY, 1:TON -> PARENT REFERENCING
c. many:many -> 2way referencing

- Tour.findById(req.params.id).populate('ten_field') : populate() fillup dữ liệu của field được truyền vào theo reference -VẪN là trong 1 QUERY- ẢNH HƯỞNG PERFORMANCE
  => hoặc theo dạng .populate({
  path: 'ten_field',
  select: '-ten_field_muon_an ten_field_muon_hien' ex: '-__v name'
  });

- toJSON virtuals, toObject virtuals ???

folder 13 vid 9